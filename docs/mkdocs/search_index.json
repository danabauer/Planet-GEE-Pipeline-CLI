{
    "docs": [
        {
            "location": "/", 
            "text": "Planet GEE Pipeline CLI\n\n\n\n\nWhile moving between assets from Planet Inc and Google Earth Engine it was imperative to create a pipeline that allows for easy transitions between the two service end points and this tool is designed to act as a step by step process chain from Planet Assets to batch upload and modification within the Google Earth Engine environment. The ambition is apart from helping user with batch actions on assets along with interacting and extending capabilities of existing GEE CLI. It is developed case by case basis to include more features in the future as it becomes available or as need arises. tab.", 
            "title": "Introduction"
        }, 
        {
            "location": "/#planet-gee-pipeline-cli", 
            "text": "While moving between assets from Planet Inc and Google Earth Engine it was imperative to create a pipeline that allows for easy transitions between the two service end points and this tool is designed to act as a step by step process chain from Planet Assets to batch upload and modification within the Google Earth Engine environment. The ambition is apart from helping user with batch actions on assets along with interacting and extending capabilities of existing GEE CLI. It is developed case by case basis to include more features in the future as it becomes available or as need arises. tab.", 
            "title": "Planet GEE Pipeline CLI"
        }, 
        {
            "location": "/installation/", 
            "text": "Installation\n\n\nWe assume Earth Engine Python API is installed and EE authorised as desribed \nhere\n. We also assume Planet Python API is installed you can install by simply running \n\n\npip install planet\n\n\n\n\nFurther instructions can be found \nhere\n \n\n\nTo install:\n\n\ngit clone https://github.com/samapriya/Planet-GEE-Pipeline-CLI.git\ncd Planet-GEE-Pipeline-CLI \n pip install .\n\n\n\n\nInstallation is an optional step; the application can be also run\ndirectly by executing geeadd.py script. The advantage of having it\ninstalled is being able to execute geeadd as any command line tool. I\nrecommend installation within virtual environment. To install run\n\n\npython setup.py develop or python setup.py install\n\nIn a linux distribution\nsudo python setup.py develop or sudo python setup.py install", 
            "title": "Installation"
        }, 
        {
            "location": "/installation/#installation", 
            "text": "We assume Earth Engine Python API is installed and EE authorised as desribed  here . We also assume Planet Python API is installed you can install by simply running   pip install planet  Further instructions can be found  here    To install:  git clone https://github.com/samapriya/Planet-GEE-Pipeline-CLI.git\ncd Planet-GEE-Pipeline-CLI   pip install .  Installation is an optional step; the application can be also run\ndirectly by executing geeadd.py script. The advantage of having it\ninstalled is being able to execute geeadd as any command line tool. I\nrecommend installation within virtual environment. To install run  python setup.py develop or python setup.py install\n\nIn a linux distribution\nsudo python setup.py develop or sudo python setup.py install", 
            "title": "Installation"
        }, 
        {
            "location": "/getting-started/", 
            "text": "Getting started\n\n\nAs usual, to print help:\n\n\nPlanet Pipeline with Google Earth Engine Batch Addons\n\npositional arguments:\n  { ,planetkey,aoijson,activatepl,downloadpl,metadata,ee_user,upload,delete,tasks,taskquery,report,cancel,mover,copy,access,collprop,convert2ft,cleanout}\n                        ---------------------------------------\n                        -----Choose from Planet Tools Below-----\n                        ---------------------------------------\n    planetkey           Enter your planet API Key\n    aoijson             Tool to convert KML, Shapefile,WKT,GeoJSON or Landsat\n                        WRS PathRow file to AreaOfInterest.JSON file with\n                        structured query for use with Planet API 1.0\n    activatepl          Tool to query and/or activate Planet Assets\n    downloadpl          Tool to download Planet Assets\n    metadata            Tool to tabulate and convert all metadata files from\n                        Planet or Digital Globe Assets\n                        -------------------------------------------\n                        ----Choose from Earth Engine Tools Below----\n                        -------------------------------------------\n    ee_user             Get Earth Engine API Key \n Paste it back to Command\n                        line/shell to change user\n    upload              Batch Asset Uploader to Earth Engine.\n    delete              Deletes collection and all items inside. Supports\n                        Unix-like wildcards.\n    tasks               Queries currently running, enqued,failed\n    taskquery           Queries currently running, enqued,failed ingestions\n                        and uploaded assets\n    report              Create a report of all tasks and exports to a CSV file\n    cancel              Cancel all running tasks\n    mover               Moves all assets from one collection to another\n    copy                Copies all assets from one collection to another:\n                        Including copying from other users if you have read\n                        permission to their assets\n    access              Sets Permissions for Images, Collection or all assets\n                        in EE Folder Example: python ee_permissions.py --mode\n                        \nfolder\n --asset \nusers/john/doe\n --user\n                        \njimmy@doe.com:R\n\n    collprop            Sets Overall Properties for Image Collection\n    convert2ft          Uploads a given feature collection to Google Fusion\n                        Table.\n    cleanout            Clear folders with datasets from earlier downloaded\n\noptional arguments:\n  -h, --help            show this help message and exit\n\n\n\n\nTo obtain help for a specific functionality, simply call it with \nhelp\n\nswitch, e.g.: \ngeeadd upload -h\n. If you didn't install geeadd, then you\ncan run it just by going to \ngeeadd\n directory and running \npython\ngeeadd.py [arguments go here]", 
            "title": "Getting started"
        }, 
        {
            "location": "/getting-started/#getting-started", 
            "text": "As usual, to print help:  Planet Pipeline with Google Earth Engine Batch Addons\n\npositional arguments:\n  { ,planetkey,aoijson,activatepl,downloadpl,metadata,ee_user,upload,delete,tasks,taskquery,report,cancel,mover,copy,access,collprop,convert2ft,cleanout}\n                        ---------------------------------------\n                        -----Choose from Planet Tools Below-----\n                        ---------------------------------------\n    planetkey           Enter your planet API Key\n    aoijson             Tool to convert KML, Shapefile,WKT,GeoJSON or Landsat\n                        WRS PathRow file to AreaOfInterest.JSON file with\n                        structured query for use with Planet API 1.0\n    activatepl          Tool to query and/or activate Planet Assets\n    downloadpl          Tool to download Planet Assets\n    metadata            Tool to tabulate and convert all metadata files from\n                        Planet or Digital Globe Assets\n                        -------------------------------------------\n                        ----Choose from Earth Engine Tools Below----\n                        -------------------------------------------\n    ee_user             Get Earth Engine API Key   Paste it back to Command\n                        line/shell to change user\n    upload              Batch Asset Uploader to Earth Engine.\n    delete              Deletes collection and all items inside. Supports\n                        Unix-like wildcards.\n    tasks               Queries currently running, enqued,failed\n    taskquery           Queries currently running, enqued,failed ingestions\n                        and uploaded assets\n    report              Create a report of all tasks and exports to a CSV file\n    cancel              Cancel all running tasks\n    mover               Moves all assets from one collection to another\n    copy                Copies all assets from one collection to another:\n                        Including copying from other users if you have read\n                        permission to their assets\n    access              Sets Permissions for Images, Collection or all assets\n                        in EE Folder Example: python ee_permissions.py --mode\n                         folder  --asset  users/john/doe  --user\n                         jimmy@doe.com:R \n    collprop            Sets Overall Properties for Image Collection\n    convert2ft          Uploads a given feature collection to Google Fusion\n                        Table.\n    cleanout            Clear folders with datasets from earlier downloaded\n\noptional arguments:\n  -h, --help            show this help message and exit  To obtain help for a specific functionality, simply call it with  help \nswitch, e.g.:  geeadd upload -h . If you didn't install geeadd, then you\ncan run it just by going to  geeadd  directory and running  python\ngeeadd.py [arguments go here]", 
            "title": "Getting started"
        }, 
        {
            "location": "/ptools/planetapi/", 
            "text": "Planet Key\n\n\nThis tool basically asks you to input your Planet API Key using a password prompt this is then used for all subsequent tools\n\n\nusage: ppipe.py planetkey [-h]\n\noptional arguments:\n  -h, --help  show this help message and exit\n\n\n\n\nIf using on a private machine the Key is saved as a csv file for all future runs of the tool.", 
            "title": "Planet API Key"
        }, 
        {
            "location": "/ptools/planetapi/#planet-key", 
            "text": "This tool basically asks you to input your Planet API Key using a password prompt this is then used for all subsequent tools  usage: ppipe.py planetkey [-h]\n\noptional arguments:\n  -h, --help  show this help message and exit  If using on a private machine the Key is saved as a csv file for all future runs of the tool.", 
            "title": "Planet Key"
        }, 
        {
            "location": "/ptools/aoijson/", 
            "text": "AOI JSON\n\n\nThe aoijson tab within the toolset allows you to create filters and structure your existing input file to that which can be used with Planet's API. The tool requires inputs with start and end date, along with cloud cover. You can choose from multiple input files types such as KML, Zipped Shapefile, GeoJSON, WKT or even Landsat Tiles based on PathRow numbers. The geo option asks you to select existing files which will be converted into formatted JSON file called aoi.json. If using WRS as an option just type in the 6 digit PathRow combination and it will create a json file for you.\n\n\nusage: ppipe.py aoijson [-h] [--start START] [--end END] [--cloud CLOUD]\n                        [--inputfile INPUTFILE] [--geo GEO]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --start START         Start date in YYYY-MM-DD?\n  --end END             End date in YYYY-MM-DD?\n  --cloud CLOUD         Maximum Cloud Cover(0-1) representing 0-100\n  --inputfile INPUTFILE\n                        Choose a kml/shapefile/geojson or WKT file for\n                        AOI(KML/SHP/GJSON/WKT) or WRS (6 digit RowPath\n                        Example: 023042)\n  --geo GEO             map.geojson/aoi.kml/aoi.shp/aoi.wkt file", 
            "title": "Parsing AOI to JSON"
        }, 
        {
            "location": "/ptools/aoijson/#aoi-json", 
            "text": "The aoijson tab within the toolset allows you to create filters and structure your existing input file to that which can be used with Planet's API. The tool requires inputs with start and end date, along with cloud cover. You can choose from multiple input files types such as KML, Zipped Shapefile, GeoJSON, WKT or even Landsat Tiles based on PathRow numbers. The geo option asks you to select existing files which will be converted into formatted JSON file called aoi.json. If using WRS as an option just type in the 6 digit PathRow combination and it will create a json file for you.  usage: ppipe.py aoijson [-h] [--start START] [--end END] [--cloud CLOUD]\n                        [--inputfile INPUTFILE] [--geo GEO]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --start START         Start date in YYYY-MM-DD?\n  --end END             End date in YYYY-MM-DD?\n  --cloud CLOUD         Maximum Cloud Cover(0-1) representing 0-100\n  --inputfile INPUTFILE\n                        Choose a kml/shapefile/geojson or WKT file for\n                        AOI(KML/SHP/GJSON/WKT) or WRS (6 digit RowPath\n                        Example: 023042)\n  --geo GEO             map.geojson/aoi.kml/aoi.shp/aoi.wkt file", 
            "title": "AOI JSON"
        }, 
        {
            "location": "/ptools/activate/", 
            "text": "Activate or Check Asset\n\n\nThe activatepl tab allows the users to either check or activate planet assets, in this case only PSOrthoTile and REOrthoTile are supported because I was only interested in these two asset types for my work but can be easily extended to other asset types. This tool makes use of an existing json file sturctured for use within Planet API or the aoi.json file created earlier\n\n\nusage: ppipe.py activatepl [-h] [--aoi AOI] [--action ACTION] [--asst ASST]\n\noptional arguments:\n  -h, --help       show this help message and exit\n  --aoi AOI        Choose aoi.json file created earlier\n  --action ACTION  choose between check/activate\n  --asst ASST      Choose between planet asset types (PSOrthoTile\n                   analytic/REOrthoTile analytic/PSOrthoTile\n                   analytic_xml/REOrthoTile analytic_xml", 
            "title": "Activate or Check Planet Assets"
        }, 
        {
            "location": "/ptools/activate/#activate-or-check-asset", 
            "text": "The activatepl tab allows the users to either check or activate planet assets, in this case only PSOrthoTile and REOrthoTile are supported because I was only interested in these two asset types for my work but can be easily extended to other asset types. This tool makes use of an existing json file sturctured for use within Planet API or the aoi.json file created earlier  usage: ppipe.py activatepl [-h] [--aoi AOI] [--action ACTION] [--asst ASST]\n\noptional arguments:\n  -h, --help       show this help message and exit\n  --aoi AOI        Choose aoi.json file created earlier\n  --action ACTION  choose between check/activate\n  --asst ASST      Choose between planet asset types (PSOrthoTile\n                   analytic/REOrthoTile analytic/PSOrthoTile\n                   analytic_xml/REOrthoTile analytic_xml", 
            "title": "Activate or Check Asset"
        }, 
        {
            "location": "/ptools/download/", 
            "text": "Download Asset\n\n\nHaving metadata helps in organising your asstets, but is not mandatory - you can skip it.\nThe downloadpl tab allows the users to download assets. The platform can download Asset or Asset_XML which is the metadata file to desired folders.One again I was only interested in these two asset types(PSOrthoTile and REOrthoTile) for my work but can be easily extended to other asset types.\n\n\nusage: ppipe.py downloadpl [-h] [--aoi AOI] [--action ACTION] [--asst ASST]\n                           [--pathway PATHWAY]\n\noptional arguments:\n  -h, --help         show this help message and exit\n  --aoi AOI          Choose aoi.json file created earlier\n  --action ACTION    choose download\n  --asst ASST        Choose between planet asset types (PSOrthoTile\n                     analytic/REOrthoTile analytic/PSOrthoTile\n                     analytic_xml/REOrthoTile analytic_xml\n  --pathway PATHWAY  Folder Pathways where PlanetAssets are saved exampled\n                     ./PlanetScope ./RapidEye", 
            "title": "Download Activated Assets"
        }, 
        {
            "location": "/ptools/download/#download-asset", 
            "text": "Having metadata helps in organising your asstets, but is not mandatory - you can skip it.\nThe downloadpl tab allows the users to download assets. The platform can download Asset or Asset_XML which is the metadata file to desired folders.One again I was only interested in these two asset types(PSOrthoTile and REOrthoTile) for my work but can be easily extended to other asset types.  usage: ppipe.py downloadpl [-h] [--aoi AOI] [--action ACTION] [--asst ASST]\n                           [--pathway PATHWAY]\n\noptional arguments:\n  -h, --help         show this help message and exit\n  --aoi AOI          Choose aoi.json file created earlier\n  --action ACTION    choose download\n  --asst ASST        Choose between planet asset types (PSOrthoTile\n                     analytic/REOrthoTile analytic/PSOrthoTile\n                     analytic_xml/REOrthoTile analytic_xml\n  --pathway PATHWAY  Folder Pathways where PlanetAssets are saved exampled\n                     ./PlanetScope ./RapidEye", 
            "title": "Download Asset"
        }, 
        {
            "location": "/ptools/metadata/", 
            "text": "Metadata Parser\n\n\nThe metadata tab is a more powerful tool and consists of metadata parsing for PlanetScope OrthoTile RapiEye OrthoTile along with Digital Globe MultiSpectral and DigitalGlobe PanChromatic datasets. This was developed as a standalone to process xml metadata files from multiple sources and is important step is the user plans to upload these assets to Google Earth Engine. The combine Planet-GEE Pipeline tool will be made available soon for testing.\n\n\nusage: ppipe.py metadata [-h] [--asset ASSET] [--mf MF] [--mfile MFILE]\n                         [--errorlog ERRORLOG]\n\noptional arguments:\n  -h, --help           show this help message and exit\n  --asset ASSET        Choose RapidEye/PlantScope/DigitalGlobe\n                       MultiSpectral/DigitalGlobe Panchromatic\n                       (RE/PS/DGMS/DGP)?\n  --mf MF              Metadata folder?\n  --mfile MFILE        Metadata filename to be exported along with Path.csv\n  --errorlog ERRORLOG  Errorlog to be exported along with Path.csv\n\n\n\n\nEarth Engine Tools\n\n\nThe ambition is apart from helping user with batch actions on assets along with interacting and extending capabilities of existing GEE CLI. It is developed case by case basis to include more features in the future as it becomes available or as need arises. This is also a seperate package for earth engine users to use and can be downloaded \nhere", 
            "title": "Metadata Parsing"
        }, 
        {
            "location": "/ptools/metadata/#metadata-parser", 
            "text": "The metadata tab is a more powerful tool and consists of metadata parsing for PlanetScope OrthoTile RapiEye OrthoTile along with Digital Globe MultiSpectral and DigitalGlobe PanChromatic datasets. This was developed as a standalone to process xml metadata files from multiple sources and is important step is the user plans to upload these assets to Google Earth Engine. The combine Planet-GEE Pipeline tool will be made available soon for testing.  usage: ppipe.py metadata [-h] [--asset ASSET] [--mf MF] [--mfile MFILE]\n                         [--errorlog ERRORLOG]\n\noptional arguments:\n  -h, --help           show this help message and exit\n  --asset ASSET        Choose RapidEye/PlantScope/DigitalGlobe\n                       MultiSpectral/DigitalGlobe Panchromatic\n                       (RE/PS/DGMS/DGP)?\n  --mf MF              Metadata folder?\n  --mfile MFILE        Metadata filename to be exported along with Path.csv\n  --errorlog ERRORLOG  Errorlog to be exported along with Path.csv", 
            "title": "Metadata Parser"
        }, 
        {
            "location": "/ptools/metadata/#earth-engine-tools", 
            "text": "The ambition is apart from helping user with batch actions on assets along with interacting and extending capabilities of existing GEE CLI. It is developed case by case basis to include more features in the future as it becomes available or as need arises. This is also a seperate package for earth engine users to use and can be downloaded  here", 
            "title": "Earth Engine Tools"
        }, 
        {
            "location": "/eetools/ee_user/", 
            "text": "Earth Engine Tools\n\n\nThe ambition is apart from helping user with batch actions on assets along with interacting and extending capabilities of existing GEE CLI. It is developed case by case basis to include more features in the future as it becomes available or as need arises. This is also a seperate package for earth engine users to use and can be downloaded \nhere\n\n\nEE User\n\n\nThis tool is designed to allow different users to change earth engine authentication credentials. The tool invokes the authentication call and copies the authentication key verification website to the clipboard which can then be pasted onto a browser and the generated key can be pasted back", 
            "title": "EE User API Key"
        }, 
        {
            "location": "/eetools/ee_user/#earth-engine-tools", 
            "text": "The ambition is apart from helping user with batch actions on assets along with interacting and extending capabilities of existing GEE CLI. It is developed case by case basis to include more features in the future as it becomes available or as need arises. This is also a seperate package for earth engine users to use and can be downloaded  here", 
            "title": "Earth Engine Tools"
        }, 
        {
            "location": "/eetools/ee_user/#ee-user", 
            "text": "This tool is designed to allow different users to change earth engine authentication credentials. The tool invokes the authentication call and copies the authentication key verification website to the clipboard which can then be pasted onto a browser and the generated key can be pasted back", 
            "title": "EE User"
        }, 
        {
            "location": "/eetools/batchupload/", 
            "text": "Batch uploader\n\n\nThe script creates an Image Collection from GeoTIFFs in your local\ndirectory. By default, the collection name is the same as the local\ndirectory name; with optional parameter you can provide a different\nname. Another optional parameter is a path to a CSV file with metadata\nfor images, which is covered in the next section:\n\nParsing metadata\n.\n\n\nusage: geeadd.py upload [-h] -u USER --source SOURCE --dest DEST [-m METADATA]\n                        [--large] [--nodata NODATA]\n\noptional arguments:\n  -h, --help            show this help message and exit\n\nRequired named arguments.:\n  -u USER, --user USER  Google account name (gmail address).\n  --source SOURCE       Path to the directory with images for upload.\n  --dest DEST           Destination. Full path for upload to Google Earth\n                        Engine, e.g. users/johndoe/myponycollection\n\nOptional named arguments:\n  -m METADATA, --metadata METADATA\n                        Path to CSV with metadata.\n  --large               (Advanced) Use multipart upload. Might help if upload\n                        of large files is failing on some systems. Might cause\n                        other issues.\n  --nodata NODATA       The value to burn into the raster as NoData (missing\n                        data)", 
            "title": "Batch Uploader"
        }, 
        {
            "location": "/eetools/batchupload/#batch-uploader", 
            "text": "The script creates an Image Collection from GeoTIFFs in your local\ndirectory. By default, the collection name is the same as the local\ndirectory name; with optional parameter you can provide a different\nname. Another optional parameter is a path to a CSV file with metadata\nfor images, which is covered in the next section: Parsing metadata .  usage: geeadd.py upload [-h] -u USER --source SOURCE --dest DEST [-m METADATA]\n                        [--large] [--nodata NODATA]\n\noptional arguments:\n  -h, --help            show this help message and exit\n\nRequired named arguments.:\n  -u USER, --user USER  Google account name (gmail address).\n  --source SOURCE       Path to the directory with images for upload.\n  --dest DEST           Destination. Full path for upload to Google Earth\n                        Engine, e.g. users/johndoe/myponycollection\n\nOptional named arguments:\n  -m METADATA, --metadata METADATA\n                        Path to CSV with metadata.\n  --large               (Advanced) Use multipart upload. Might help if upload\n                        of large files is failing on some systems. Might cause\n                        other issues.\n  --nodata NODATA       The value to burn into the raster as NoData (missing\n                        data)", 
            "title": "Batch uploader"
        }, 
        {
            "location": "/eetools/parsemeta/", 
            "text": "Parsing metadata\n\n\nBy metadata we understand here the properties associated with each image. Thanks to these, GEE user can easily filter collection based on specified criteria. The file with metadata should be organised as follows:\n\n\n\n\n\n\n\n\nfilename (without extension)\n\n\nproperty1 header\n\n\nproperty2 header\n\n\n\n\n\n\n\n\n\n\nfile1\n\n\nvalue1\n\n\nvalue2\n\n\n\n\n\n\nfile2\n\n\nvalue3\n\n\nvalue4\n\n\n\n\n\n\n\n\nNote that header can contain only letters, digits and underscores. \n\n\nExample:\n\n\n\n\n\n\n\n\nid_no\n\n\nclass\n\n\ncategory\n\n\nbinomial\n\n\nsystem:time_start\n\n\n\n\n\n\n\n\n\n\nmy_file_1\n\n\nLand\n\n\nLN\n\n\nLand Area Only\n\n\n1478943081000\n\n\n\n\n\n\nmy_file_2\n\n\nWater\n\n\nWT\n\n\nWater Area Only\n\n\n1478943081000\n\n\n\n\n\n\n\n\nThe corresponding files are my_file_1.tif and my_file_2.tif. With each of the files five properties are associated: id_no, class, category, binomial and system:time_start. The latter is time in Unix epoch format, in milliseconds, as documented in GEE glosary. The program will match the file names from the upload directory with ones provided in the CSV and pass the metadata in JSON format:\n\n\n{ id_no: my_file_1, class: Land, category: LN, binomial: Land Area Only, system:time_start: 1478943081000}\n\n\n\n\nThe program will report any illegal fields, it will also complain if not all of the images passed for upload have metadata associated. User can opt to ignore it, in which case some assets will have no properties.\n\n\nHaving metadata helps in organising your asstets, but is not mandatory - you can skip it.", 
            "title": "Parsing Metadata"
        }, 
        {
            "location": "/eetools/parsemeta/#parsing-metadata", 
            "text": "By metadata we understand here the properties associated with each image. Thanks to these, GEE user can easily filter collection based on specified criteria. The file with metadata should be organised as follows:     filename (without extension)  property1 header  property2 header      file1  value1  value2    file2  value3  value4     Note that header can contain only letters, digits and underscores.   Example:     id_no  class  category  binomial  system:time_start      my_file_1  Land  LN  Land Area Only  1478943081000    my_file_2  Water  WT  Water Area Only  1478943081000     The corresponding files are my_file_1.tif and my_file_2.tif. With each of the files five properties are associated: id_no, class, category, binomial and system:time_start. The latter is time in Unix epoch format, in milliseconds, as documented in GEE glosary. The program will match the file names from the upload directory with ones provided in the CSV and pass the metadata in JSON format:  { id_no: my_file_1, class: Land, category: LN, binomial: Land Area Only, system:time_start: 1478943081000}  The program will report any illegal fields, it will also complain if not all of the images passed for upload have metadata associated. User can opt to ignore it, in which case some assets will have no properties.  Having metadata helps in organising your asstets, but is not mandatory - you can skip it.", 
            "title": "Parsing metadata"
        }, 
        {
            "location": "/eetools/taskquery/", 
            "text": "Task Query\n\n\nThis script counts all currently running and ready tasks along with failed tasks.\n\n\nusage: geeadd.py tasks [-h]\n\noptional arguments:\n  -h, --help  show this help message and exit\n\ngeeadd.py tasks", 
            "title": "Task Query all EE Tasks"
        }, 
        {
            "location": "/eetools/taskquery/#task-query", 
            "text": "This script counts all currently running and ready tasks along with failed tasks.  usage: geeadd.py tasks [-h]\n\noptional arguments:\n  -h, --help  show this help message and exit\n\ngeeadd.py tasks", 
            "title": "Task Query"
        }, 
        {
            "location": "/eetools/ingestion/", 
            "text": "Task Query during ingestion\n\n\nThis script can be used intermittently to look at running, failed and ready(waiting) tasks during ingestion. This script is a special case using query tasks only when uploading assets to collection by providing collection pathway to see how collection size increases.\n\n\nusage: geeadd.py taskquery [-h] [--destination DESTINATION]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --destination DESTINATION\n                        Full path to asset where you are uploading files\n\ngeeadd.py taskquery \nusers/johndoe/myfolder/myponycollection", 
            "title": "Ingestion Query"
        }, 
        {
            "location": "/eetools/ingestion/#task-query-during-ingestion", 
            "text": "This script can be used intermittently to look at running, failed and ready(waiting) tasks during ingestion. This script is a special case using query tasks only when uploading assets to collection by providing collection pathway to see how collection size increases.  usage: geeadd.py taskquery [-h] [--destination DESTINATION]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --destination DESTINATION\n                        Full path to asset where you are uploading files\n\ngeeadd.py taskquery  users/johndoe/myfolder/myponycollection", 
            "title": "Task Query during ingestion"
        }, 
        {
            "location": "/eetools/taskreport/", 
            "text": "Task Report\n\n\nSometimes it is important to generate a report based on all tasks that is running or has finished. Generated report includes taskId, data time, task status and type\n\n\nusage: geeadd.py report [-h] [--r R] [--e E]\n\noptional arguments:\n  -h, --help  show this help message and exit\n  --r R       Path \n CSV filename where the report will be saved\n  --e E       Path \n CSV filename where the errorlog will be saved\n\ngeeadd.py report --r \nreport.csv\n --e \nerrorlog.csv", 
            "title": "Task Report"
        }, 
        {
            "location": "/eetools/taskreport/#task-report", 
            "text": "Sometimes it is important to generate a report based on all tasks that is running or has finished. Generated report includes taskId, data time, task status and type  usage: geeadd.py report [-h] [--r R] [--e E]\n\noptional arguments:\n  -h, --help  show this help message and exit\n  --r R       Path   CSV filename where the report will be saved\n  --e E       Path   CSV filename where the errorlog will be saved\n\ngeeadd.py report --r  report.csv  --e  errorlog.csv", 
            "title": "Task Report"
        }, 
        {
            "location": "/eetools/deletecoll/", 
            "text": "Delete a collection with content:\n\n\nThe delete is recursive, meaning it will delete also all children assets: images, collections and folders. Use with caution!\n\n\ngeeadd delete users/johndoe/test\n\n\n\n\nConsole output:\n\n\n2016-07-17 16:14:09,212 :: oauth2client.client :: INFO :: Attempting refresh to obtain initial access_token\n2016-07-17 16:14:09,213 :: oauth2client.client :: INFO :: Refreshing access_token\n2016-07-17 16:14:10,842 :: root :: INFO :: Attempting to delete collection test\n2016-07-17 16:14:16,898 :: root :: INFO :: Collection users/johndoe/test removed\n\n\n\n\nDelete all directories / collections based on a Unix-like pattern\n\n\ngeeadd delete users/johndoe/*weird[0-9]?name*", 
            "title": "Delete Collection"
        }, 
        {
            "location": "/eetools/deletecoll/#delete-a-collection-with-content", 
            "text": "The delete is recursive, meaning it will delete also all children assets: images, collections and folders. Use with caution!  geeadd delete users/johndoe/test  Console output:  2016-07-17 16:14:09,212 :: oauth2client.client :: INFO :: Attempting refresh to obtain initial access_token\n2016-07-17 16:14:09,213 :: oauth2client.client :: INFO :: Refreshing access_token\n2016-07-17 16:14:10,842 :: root :: INFO :: Attempting to delete collection test\n2016-07-17 16:14:16,898 :: root :: INFO :: Collection users/johndoe/test removed", 
            "title": "Delete a collection with content:"
        }, 
        {
            "location": "/eetools/deletecoll/#delete-all-directories-collections-based-on-a-unix-like-pattern", 
            "text": "geeadd delete users/johndoe/*weird[0-9]?name*", 
            "title": "Delete all directories / collections based on a Unix-like pattern"
        }, 
        {
            "location": "/eetools/move/", 
            "text": "Assets Move\n\n\nThis script allows us to recursively move assets from one collection to the other.\n\n\nusage: geeadd.py mover [-h] [--assetpath ASSETPATH] [--finalpath FINALPATH]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --assetpath ASSETPATH\n                        Existing path of assets\n  --finalpath FINALPATH\n                        New path for assets\ngeeadd.py mover --assetpath \nusers/johndoe/myfolder/myponycollection\n --destination \nusers/johndoe/myfolder/myotherponycollection", 
            "title": "Moving EE Assets"
        }, 
        {
            "location": "/eetools/move/#assets-move", 
            "text": "This script allows us to recursively move assets from one collection to the other.  usage: geeadd.py mover [-h] [--assetpath ASSETPATH] [--finalpath FINALPATH]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --assetpath ASSETPATH\n                        Existing path of assets\n  --finalpath FINALPATH\n                        New path for assets\ngeeadd.py mover --assetpath  users/johndoe/myfolder/myponycollection  --destination  users/johndoe/myfolder/myotherponycollection", 
            "title": "Assets Move"
        }, 
        {
            "location": "/eetools/copya/", 
            "text": "Assets Copy\n\n\nThis script allows us to recursively copy assets from one collection to the other. If you have read acess to assets from another user this will also allow you to copy assets from their collections.\n\n\nusage: geeadd.py copy [-h] [--initial INITIAL] [--final FINAL]\n\noptional arguments:\n  -h, --help         show this help message and exit\n  --initial INITIAL  Existing path of assets\n  --final FINAL      New path for assets\ngeeadd.py mover --initial \nusers/johndoe/myfolder/myponycollection\n --final \nusers/johndoe/myfolder/myotherponycollection", 
            "title": "Copying EE Assets"
        }, 
        {
            "location": "/eetools/copya/#assets-copy", 
            "text": "This script allows us to recursively copy assets from one collection to the other. If you have read acess to assets from another user this will also allow you to copy assets from their collections.  usage: geeadd.py copy [-h] [--initial INITIAL] [--final FINAL]\n\noptional arguments:\n  -h, --help         show this help message and exit\n  --initial INITIAL  Existing path of assets\n  --final FINAL      New path for assets\ngeeadd.py mover --initial  users/johndoe/myfolder/myponycollection  --final  users/johndoe/myfolder/myotherponycollection", 
            "title": "Assets Copy"
        }, 
        {
            "location": "/eetools/chgassets/", 
            "text": "Assets Access\n\n\nThis tool allows you to set asset acess for either folder , collection or image recursively meaning you can add collection access properties for multiple assets at the same time.\n\n\nusage: geeadd access [-h] --mode MODE --asset ASSET --user USER\n\noptional arguments:\n  -h, --help     show this help message and exit\n  --mode MODE    This lets you select if you want to change permission or\n                 folder/collection/image\n  --asset ASSET  This is the path to the earth engine asset whose permission\n                 you are changing folder/collection/image\n  --user USER    This is the email address to whom you want to give read or\n                 write permission Usage: \njohn@doe.com:R\n or \njohn@doe.com:W\n\n                 R/W refers to read or write permission\ngeeadd.py access --mode folder --asset \nfolder/collection/image\n --user \njohn@doe.com:R", 
            "title": "Change Access to EE Assets"
        }, 
        {
            "location": "/eetools/chgassets/#assets-access", 
            "text": "This tool allows you to set asset acess for either folder , collection or image recursively meaning you can add collection access properties for multiple assets at the same time.  usage: geeadd access [-h] --mode MODE --asset ASSET --user USER\n\noptional arguments:\n  -h, --help     show this help message and exit\n  --mode MODE    This lets you select if you want to change permission or\n                 folder/collection/image\n  --asset ASSET  This is the path to the earth engine asset whose permission\n                 you are changing folder/collection/image\n  --user USER    This is the email address to whom you want to give read or\n                 write permission Usage:  john@doe.com:R  or  john@doe.com:W \n                 R/W refers to read or write permission\ngeeadd.py access --mode folder --asset  folder/collection/image  --user  john@doe.com:R", 
            "title": "Assets Access"
        }, 
        {
            "location": "/eetools/collprop/", 
            "text": "Set Collection Property\n\n\nThis script is derived from the ee tool to set collection properties and will set overall properties for collection. \n\n\nusage: geeadd.py collprop [-h] [--coll COLL] [--p P]\n\noptional arguments:\n  -h, --help   show this help message and exit\n  --coll COLL  Path of Image Collection\n  --p P        \nsystem:description=Description\n/\nsystem:provider_url=url\n/\nsys\n               tem:tags=tags\n/\nsystem:title=title", 
            "title": "Set EE Collection Properties"
        }, 
        {
            "location": "/eetools/collprop/#set-collection-property", 
            "text": "This script is derived from the ee tool to set collection properties and will set overall properties for collection.   usage: geeadd.py collprop [-h] [--coll COLL] [--p P]\n\noptional arguments:\n  -h, --help   show this help message and exit\n  --coll COLL  Path of Image Collection\n  --p P         system:description=Description / system:provider_url=url / sys\n               tem:tags=tags / system:title=title", 
            "title": "Set Collection Property"
        }, 
        {
            "location": "/eetools/fusion/", 
            "text": "Convert to Fusion Table\n\n\nOnce validated with gdal and google fusion table it can be used to convert any geoObject to google fusion table. Forked and contributed by Gennadii \nhere\n. The scripts can be used only with a specific google account\n\n\nusage: geeadd.py convert2ft [-h] --i I --o O [--add_missing]\n\noptional arguments:\n  -h, --help     show this help message and exit\n  --i I          input feature source (KML, SHP, SpatiLite, etc.)\n  --o O          output Fusion Table name\n  --add_missing  add missing features from the last inserted feature index\n\ngeeadd.py convert2ft --i \n./aoi.kml\n --o \nconverted_aoi", 
            "title": "Convert to Fusion Table"
        }, 
        {
            "location": "/eetools/fusion/#convert-to-fusion-table", 
            "text": "Once validated with gdal and google fusion table it can be used to convert any geoObject to google fusion table. Forked and contributed by Gennadii  here . The scripts can be used only with a specific google account  usage: geeadd.py convert2ft [-h] --i I --o O [--add_missing]\n\noptional arguments:\n  -h, --help     show this help message and exit\n  --i I          input feature source (KML, SHP, SpatiLite, etc.)\n  --o O          output Fusion Table name\n  --add_missing  add missing features from the last inserted feature index\n\ngeeadd.py convert2ft --i  ./aoi.kml  --o  converted_aoi", 
            "title": "Convert to Fusion Table"
        }, 
        {
            "location": "/eetools/canceltsk/", 
            "text": "Cancel all tasks\n\n\nThis is a simpler tool, can be called directly from the earthengine cli as well\n\n\nearthengine cli command\nearthengine task cancel all\n\nusage: geeadd.py cancel [-h]\n\noptional arguments:\n  -h, --help  show this help message and exit", 
            "title": "Cancel all tasks"
        }, 
        {
            "location": "/eetools/canceltsk/#cancel-all-tasks", 
            "text": "This is a simpler tool, can be called directly from the earthengine cli as well  earthengine cli command\nearthengine task cancel all\n\nusage: geeadd.py cancel [-h]\n\noptional arguments:\n  -h, --help  show this help message and exit", 
            "title": "Cancel all tasks"
        }, 
        {
            "location": "/cleardir/", 
            "text": "Cleanup Utility\n\n\nThis script is used to clean folders once all processes have been completed. In short this is a function to clear folder on local machine.\n\n\nusage: geeadd.py cleanout [-h] [--dirpath DIRPATH]\n\noptional arguments:\n  -h, --help         show this help message and exit\n  --dirpath DIRPATH  Folder you want to delete after all processes have been\n                     completed\ngeeadd.py cleanout --dirpath \n./folder", 
            "title": "Clear Directory"
        }, 
        {
            "location": "/cleardir/#cleanup-utility", 
            "text": "This script is used to clean folders once all processes have been completed. In short this is a function to clear folder on local machine.  usage: geeadd.py cleanout [-h] [--dirpath DIRPATH]\n\noptional arguments:\n  -h, --help         show this help message and exit\n  --dirpath DIRPATH  Folder you want to delete after all processes have been\n                     completed\ngeeadd.py cleanout --dirpath  ./folder", 
            "title": "Cleanup Utility"
        }, 
        {
            "location": "/release-notes/", 
            "text": "Release notes\n\n\n0.1.1\n\n\n\n\nInitial release", 
            "title": "Release notes"
        }, 
        {
            "location": "/release-notes/#release-notes", 
            "text": "", 
            "title": "Release notes"
        }, 
        {
            "location": "/release-notes/#011", 
            "text": "Initial release", 
            "title": "0.1.1"
        }, 
        {
            "location": "/license/", 
            "text": "Apache License\n                       Version 2.0, January 2004\n                    http://www.apache.org/licenses/\n\n\n\nTERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n\n\n\n\n\nDefinitions.\n\n\n\"License\" shall mean the terms and conditions for use, reproduction,\n  and distribution as defined by Sections 1 through 9 of this document.\n\n\n\"Licensor\" shall mean the copyright owner or entity authorized by\n  the copyright owner that is granting the License.\n\n\n\"Legal Entity\" shall mean the union of the acting entity and all\n  other entities that control, are controlled by, or are under common\n  control with that entity. For the purposes of this definition,\n  \"control\" means (i) the power, direct or indirect, to cause the\n  direction or management of such entity, whether by contract or\n  otherwise, or (ii) ownership of fifty percent (50%) or more of the\n  outstanding shares, or (iii) beneficial ownership of such entity.\n\n\n\"You\" (or \"Your\") shall mean an individual or Legal Entity\n  exercising permissions granted by this License.\n\n\n\"Source\" form shall mean the preferred form for making modifications,\n  including but not limited to software source code, documentation\n  source, and configuration files.\n\n\n\"Object\" form shall mean any form resulting from mechanical\n  transformation or translation of a Source form, including but\n  not limited to compiled object code, generated documentation,\n  and conversions to other media types.\n\n\n\"Work\" shall mean the work of authorship, whether in Source or\n  Object form, made available under the License, as indicated by a\n  copyright notice that is included in or attached to the work\n  (an example is provided in the Appendix below).\n\n\n\"Derivative Works\" shall mean any work, whether in Source or Object\n  form, that is based on (or derived from) the Work and for which the\n  editorial revisions, annotations, elaborations, or other modifications\n  represent, as a whole, an original work of authorship. For the purposes\n  of this License, Derivative Works shall not include works that remain\n  separable from, or merely link (or bind by name) to the interfaces of,\n  the Work and Derivative Works thereof.\n\n\n\"Contribution\" shall mean any work of authorship, including\n  the original version of the Work and any modifications or additions\n  to that Work or Derivative Works thereof, that is intentionally\n  submitted to Licensor for inclusion in the Work by the copyright owner\n  or by an individual or Legal Entity authorized to submit on behalf of\n  the copyright owner. For the purposes of this definition, \"submitted\"\n  means any form of electronic, verbal, or written communication sent\n  to the Licensor or its representatives, including but not limited to\n  communication on electronic mailing lists, source code control systems,\n  and issue tracking systems that are managed by, or on behalf of, the\n  Licensor for the purpose of discussing and improving the Work, but\n  excluding communication that is conspicuously marked or otherwise\n  designated in writing by the copyright owner as \"Not a Contribution.\"\n\n\n\"Contributor\" shall mean Licensor and any individual or Legal Entity\n  on behalf of whom a Contribution has been received by Licensor and\n  subsequently incorporated within the Work.\n\n\n\n\n\n\nGrant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n\n\n\n\n\nGrant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n\n\n\n\n\nRedistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n\n(a) You must give any other recipients of the Work or\n      Derivative Works a copy of this License; and\n\n\n(b) You must cause any modified files to carry prominent notices\n      stating that You changed the files; and\n\n\n(c) You must retain, in the Source form of any Derivative Works\n      that You distribute, all copyright, patent, trademark, and\n      attribution notices from the Source form of the Work,\n      excluding those notices that do not pertain to any part of\n      the Derivative Works; and\n\n\n(d) If the Work includes a \"NOTICE\" text file as part of its\n      distribution, then any Derivative Works that You distribute must\n      include a readable copy of the attribution notices contained\n      within such NOTICE file, excluding those notices that do not\n      pertain to any part of the Derivative Works, in at least one\n      of the following places: within a NOTICE text file distributed\n      as part of the Derivative Works; within the Source form or\n      documentation, if provided along with the Derivative Works; or,\n      within a display generated by the Derivative Works, if and\n      wherever such third-party notices normally appear. The contents\n      of the NOTICE file are for informational purposes only and\n      do not modify the License. You may add Your own attribution\n      notices within Derivative Works that You distribute, alongside\n      or as an addendum to the NOTICE text from the Work, provided\n      that such additional attribution notices cannot be construed\n      as modifying the License.\n\n\nYou may add Your own copyright statement to Your modifications and\n  may provide additional or different license terms and conditions\n  for use, reproduction, or distribution of Your modifications, or\n  for any such Derivative Works as a whole, provided Your use,\n  reproduction, and distribution of the Work otherwise complies with\n  the conditions stated in this License.\n\n\n\n\n\n\nSubmission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n\n\n\n\n\nTrademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n\n\n\n\n\nDisclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n\n\n\n\n\nLimitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n\n\n\n\n\nAccepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n\n\n\n\n\nEND OF TERMS AND CONDITIONS\n\n\nAPPENDIX: How to apply the Apache License to your work.\n\n\n  To apply the Apache License to your work, attach the following\n  boilerplate notice, with the fields enclosed by brackets \"{}\"\n  replaced with your own identifying information. (Don't include\n  the brackets!)  The text should be enclosed in the appropriate\n  comment syntax for the file format. We also recommend that a\n  file or class name and description of purpose be included on the\n  same \"printed page\" as the copyright notice for easier\n  identification within third-party archives.\n\n\n\nCopyright {2017} {Samapriya Roy}\n\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n\n   http://www.apache.org/licenses/LICENSE-2.0\n\n\n\nUnless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.", 
            "title": "License"
        }, 
        {
            "location": "/credits/", 
            "text": "Credits\n\n\nJetStream\n A portion of the work is suported by JetStream Grant TG-GEO160014.\n\n\nAlso supported by \nPlanet Labs Ambassador Program", 
            "title": "Credits"
        }, 
        {
            "location": "/credits/#credits", 
            "text": "JetStream  A portion of the work is suported by JetStream Grant TG-GEO160014.  Also supported by  Planet Labs Ambassador Program", 
            "title": "Credits"
        }
    ]
}